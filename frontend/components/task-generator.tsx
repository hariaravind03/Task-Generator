"use client"
import { auth } from "@/lib/firebase"; 
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Loader2, Plus, Sparkles } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import { useTaskContext } from "@/contexts/task-context"

interface GeneratedTask {
  title: string
  selected: boolean
}

export function TaskGenerator() {
  const [topic, setTopic] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedTasks, setGeneratedTasks] = useState<GeneratedTask[]>([])
  const [isSaving, setIsSaving] = useState(false)
  const { addMultipleTasks } = useTaskContext()
  const { toast } = useToast()

  const generateTasks = async () => {
    if (!topic.trim()) {
      toast({
        title: "Error",
        description: "Please enter a topic",
        variant: "destructive",
      })
      return
    }

    setIsGenerating(true)

    const user = auth.currentUser;
    const token = user && (await user.getIdToken());

    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}/generate-tasks`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ topic }),
      });
      const data = await res.json()
      if (!res.ok) throw new Error(data.error || "Failed to generate tasks")
      const tasks: string[] = data.tasks
      setGeneratedTasks(tasks.map((task) => ({ title: task, selected: true })))
      toast({
        title: "Success",
        description: `Generated ${tasks.length} tasks for "${topic}"`,
      })
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to generate tasks. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsGenerating(false)
    }
  }

  const toggleTaskSelection = (index: number) => {
    setGeneratedTasks((prev) => prev.map((task, i) => (i === index ? { ...task, selected: !task.selected } : task)))
  }

  const saveTasks = async () => {
    const selectedTasks = generatedTasks.filter((task) => task.selected)

    if (selectedTasks.length === 0) {
      toast({
        title: "Error",
        description: "Please select at least one task to save",
        variant: "destructive",
      })
      return
    }

    setIsSaving(true)

    // Simulate save delay
    await new Promise((resolve) => setTimeout(resolve, 800))

    try {
      const user = auth.currentUser;
      const userId = user ? user.uid : null;
      if (!userId) throw new Error("User not authenticated");
      const tasksToAdd = selectedTasks.map((task) => ({
        title: task.title,
        topic,
        category: "AI Generated",
        completed: false,
        userId,
      }))

      await addMultipleTasks(tasksToAdd)

      toast({
        title: "Success",
        description: `Saved ${selectedTasks.length} tasks`,
      })

      setGeneratedTasks([])
      setTopic("")
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : String(error) || "Failed to save tasks. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSaving(false)
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center space-x-2 text-base sm:text-lg md:text-xl">
          <Sparkles className="h-5 w-5 text-blue-600" />
          <span>AI Task Generator</span>
        </CardTitle>
        <CardDescription className="text-xs sm:text-sm md:text-base">Enter any topic and get 5 actionable tasks generated by Google Gemini AI</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex flex-col sm:flex-row gap-2 sm:gap-2">
          <Input
            placeholder="e.g., Learn Python, Start a blog, Improve fitness..."
            value={topic}
            onChange={(e) => setTopic(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && generateTasks()}
            className="w-full sm:w-auto flex-1"
          />
          <Button onClick={generateTasks} disabled={isGenerating} className="w-full sm:w-auto">
            {isGenerating ? <Loader2 className="h-4 w-4 animate-spin" /> : <Sparkles className="h-4 w-4" />}
            <span className="hidden sm:inline ml-2">Generate</span>
          </Button>
        </div>

        {generatedTasks.length > 0 && (
          <div className="space-y-4">
            <div className="space-y-2">
              <h4 className="font-medium text-base sm:text-lg">Generated Tasks for "{topic}"</h4>
              <p className="text-xs sm:text-sm text-gray-600">Click to select/deselect tasks you want to save</p>
            </div>

            <div className="space-y-2">
              {generatedTasks.map((task, index) => (
                <div
                  key={index}
                  className={`p-3 border rounded-lg cursor-pointer transition-colors text-sm sm:text-base ${
                    task.selected ? "border-blue-500 bg-blue-50" : "border-gray-200 hover:border-gray-300"
                  }`}
                  onClick={() => toggleTaskSelection(index)}
                >
                  <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
                    <span className={task.selected ? "text-blue-900" : "text-gray-700"}>{task.title}</span>
                    {task.selected && (
                      <Badge variant="secondary" className="bg-blue-100 text-blue-800 mt-2 sm:mt-0">
                        Selected
                      </Badge>
                    )}
                  </div>
                </div>
              ))}
            </div>

            <Button onClick={saveTasks} disabled={isSaving} className="w-full">
              {isSaving ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : <Plus className="h-4 w-4 mr-2" />}
              Save Selected Tasks ({generatedTasks.filter((t) => t.selected).length})
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  )
}
